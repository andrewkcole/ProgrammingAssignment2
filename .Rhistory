mean(iris[,"Sepal.Length"][iris[,"Species"]=="virginica"])
library(datasets)
data(mtcars)
mtcars
mtcars
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mtcars
mtcars$hp
mtcars$hp[mtcars[,'cylinder'=4]]
mtcars[,'cylinder'=4]
mtcars[,'cylinder'="4"]
mtcars$hp[mtcars[,'cyl'==4]]
mtcars[,'cyl'==4]
iris[,"Species"]=="virginica"]
iris[,"Species"]=="virginica"
mtcars[,"cyl"=="4"]
mtcars[,"cyl"]==4
mtcars$hp[mtcars[,"cyl"]==4]
sapply(split(mtcars$hp), mtcars$cyl, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
x<-sapply(split(mtcars$hp, mtcars$cyl), mean)
x[1,1]-x[1,3]
x[1]-x[3]
82-209
abs( x[1]-x[3] )
ls?
?ls
debug(ls)
ls
rowMeans(iris[, 1:4])
colMeans(iris[1:4])[iris[,5]=="virginica"]
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
iris$Sepal.Length
iris
iris$"Sepal.Length"
debug()
undebug(ls)
q
Q
q
[iris$"Sepal.Length"]
iris$"Sepal.Length"
mean(iris[,"Sepal.Length"][iris[,"Species"]=="virginica"])
apply(iris[, 1:4], 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mtcars
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
x<-sapply(split(mtcars$hp, mtcars$cyl), mean)
abs( x[1]-x[3] )
abs( x[1]-x[3] )
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vector <- 1:10
cachemean(vector)
makeVector(vector)
x <- makeVector(vector)
x
get(x)
x$get()
x$
x$get()
vector <- makeVector(vector)
vector$get()
x <- 1:10
vector <- makeVector(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set,
get = get,
setmean = setmean,
getmean = getmean
)
}
cacheMean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vector <- makeVector(x)
vector$get()
vector
vector$set(11:20)
vector$get()
vector <- makeVector(null)
vector$get()
vector$set(11:20)
vector$get()
## Example vector object cache function for Assignment 2 run these to start the process
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set,
get = get,
setmean = setmean,
getmean = getmean
)
}
cacheMean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vector <- makeVector(null)
vector$get()
vector$set(1:10)
vector$get()
vector$getmean()
vector$getmean()
vector <- makeVector(1:10)
vector$get()
vector$getmean()
cacheMean(vector)
vector$getmean()
## Example vector object cache function for Assignment 2 run these to start the process
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set,
get = get,
setmean = setmean,
getmean = getmean
)
}
cacheMean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- 1:10
vector <- makeVector(x)
vector$get()
vector$getmean()
cacheMean(vector)
vector$getmean()
x <- 1:3;
y <- 4:6;
z <- 7:9;
m <- cbind(x,y,z)
m
matrix <- makeCacheMatrix(m)
makeCacheMatrix <- function(x = matrix()) {
## contains two objects
## xMatrix - simple original matrix
## xInverse - inverse of xMatrix (or null if not yet computed)
xInverse <- NULL
## set function sets internal matrix 'xMatrix' to the new value 'newMatrix'
## and resets the cached inverse 'xInverse' to NULL
set <- function(newMatrix) {
xMatrix <<- newMatrix
xInverse <<- NULL
}
## get function returns internal matrix 'x'
get <- function() xMatrix
## setInverse and getInverse **should be private functions**
setInverse <- function(newInverse) xInverse <<- newInverse
getInverse <- function() xInverse
## use list to initialise compute all the internal functions
list(set = setMatrix,
get = getMatrix,
setInverse = setInverse,
getInverse = getInverse
)
}
cacheSolve <- function(x) {
## get the cached inverse of the 'x' objects internal matrix ( 'xMatrix' )
## store as "cacheInverse"
cacheInverse <- x$getInverse()
## if the inverse has been cached then return it and exit function
if(!is.null(cacheInverse)) {
message("returning cached matrix inverse")
return(cacheInverse)
}
## get the cached matrix inside the 'x' object and compute inverse with solve()
cacheMatrix <- x$getMatrix()
computeInverse <- solve(cacheMatrix, ...)
## store the newly computed matrix inverse inside the 'x' object using setInverse
x$setInverse(computeInverse)
computeInverse
}
matrix <- makeCacheMatrix(m)
makeCacheMatrix <- function(x = matrix()) {
## contains two objects
## xMatrix - simple original matrix
## xInverse - inverse of xMatrix (or null if not yet computed)
xInverse <- NULL
## set function sets internal matrix 'xMatrix' to the new value 'newMatrix'
## and resets the cached inverse 'xInverse' to NULL
set <- function(newMatrix) {
xMatrix <<- newMatrix
xInverse <<- NULL
}
## get function returns internal matrix 'x'
get <- function() xMatrix
## setInverse and getInverse **should be private functions**
setInverse <- function(newInverse) xInverse <<- newInverse
getInverse <- function() xInverse
## use list to initialise compute all the internal functions
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse
)
}
cacheSolve <- function(x) {
## get the cached inverse of the 'x' objects internal matrix ( 'xMatrix' )
## store as "cacheInverse"
cacheInverse <- x$getInverse()
## if the inverse has been cached then return it and exit function
if(!is.null(cacheInverse)) {
message("returning cached matrix inverse")
return(cacheInverse)
}
## get the cached matrix inside the 'x' object and compute inverse with solve()
cacheMatrix <- x$getMatrix()
computeInverse <- solve(cacheMatrix, ...)
## store the newly computed matrix inverse inside the 'x' object using setInverse
x$setInverse(computeInverse)
computeInverse
}
## ----------------- NOW DO THE THINGS ----------------- ##
x <- 1:3;
y <- 4:6;
z <- 7:9;
m <- cbind(x,y,z);
matrix <- makeCacheMatrix(m)
makeCacheMatrix <- function(x = matrix()) {
## contains two objects
## xMatrix - simple original matrix
## xInverse - inverse of xMatrix (or null if not yet computed)
xInverse <- NULL
## set function sets internal matrix 'xMatrix' to the new value 'newMatrix'
## and resets the cached inverse 'xInverse' to NULL
setMatrix <- function(newMatrix) {
xMatrix <<- newMatrix
xInverse <<- NULL
}
## get function returns internal matrix 'x'
get <- function() xMatrix
## setInverse and getInverse **should be private functions**
setInverse <- function(newInverse) xInverse <<- newInverse
getInverse <- function() xInverse
## use list to initialise compute all the internal functions
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse
)
}
cacheSolve <- function(x) {
## get the cached inverse of the 'x' objects internal matrix ( 'xMatrix' )
## store as "cacheInverse"
cacheInverse <- x$getInverse()
## if the inverse has been cached then return it and exit function
if(!is.null(cacheInverse)) {
message("returning cached matrix inverse")
return(cacheInverse)
}
## get the cached matrix inside the 'x' object and compute inverse with solve()
cacheMatrix <- x$getMatrix()
computeInverse <- solve(cacheMatrix, ...)
## store the newly computed matrix inverse inside the 'x' object using setInverse
x$setInverse(computeInverse)
computeInverse
}
## ----------------- NOW DO THE THINGS ----------------- ##
x <- 1:3;
y <- 4:6;
z <- 7:9;
m <- cbind(x,y,z);
matrix <- makeCacheMatrix(m)
makeCacheMatrix <- function(x = matrix()) {
## contains two objects
## xMatrix - simple original matrix
## xInverse - inverse of xMatrix (or null if not yet computed)
xInverse <- NULL
## set function sets internal matrix 'xMatrix' to the new value 'newMatrix'
## and resets the cached inverse 'xInverse' to NULL
setMatrix <- function(newMatrix) {
xMatrix <<- newMatrix
xInverse <<- NULL
}
## get function returns internal matrix 'x'
getMatrix <- function() xMatrix
## setInverse and getInverse **should be private functions**
setInverse <- function(newInverse) xInverse <<- newInverse
getInverse <- function() xInverse
## use list to initialise compute all the internal functions
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse
)
}
cacheSolve <- function(x) {
## get the cached inverse of the 'x' objects internal matrix ( 'xMatrix' )
## store as "cacheInverse"
cacheInverse <- x$getInverse()
## if the inverse has been cached then return it and exit function
if(!is.null(cacheInverse)) {
message("returning cached matrix inverse")
return(cacheInverse)
}
## get the cached matrix inside the 'x' object and compute inverse with solve()
cacheMatrix <- x$getMatrix()
computeInverse <- solve(cacheMatrix, ...)
## store the newly computed matrix inverse inside the 'x' object using setInverse
x$setInverse(computeInverse)
computeInverse
}
## ----------------- NOW DO THE THINGS ----------------- ##
x <- 1:3;
y <- 4:6;
z <- 7:9;
m <- cbind(x,y,z);
matrix <- makeCacheMatrix(m)
matrix
matrix$getMatrix()
makeCacheMatrix <- function(x = matrix()) {
## contains two objects
## xMatrix - simple original matrix
## xInverse - inverse of xMatrix (or null if not yet computed)
xMatrix <- x
xInverse <- NULL
## set function sets internal matrix 'xMatrix' to the new value 'newMatrix'
## and resets the cached inverse 'xInverse' to NULL
setMatrix <- function(newMatrix) {
xMatrix <<- newMatrix
xInverse <<- NULL
}
## get function returns internal matrix 'x'
getMatrix <- function() xMatrix
## setInverse and getInverse **should be private functions**
setInverse <- function(newInverse) xInverse <<- newInverse
getInverse <- function() xInverse
## use list to initialise compute all the internal functions
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse
)
}
cacheSolve <- function(x) {
## get the cached inverse of the 'x' objects internal matrix ( 'xMatrix' )
## store as "cacheInverse"
cacheInverse <- x$getInverse()
## if the inverse has been cached then return it and exit function
if(!is.null(cacheInverse)) {
message("returning cached matrix inverse")
return(cacheInverse)
}
## get the cached matrix inside the 'x' object and compute inverse with solve()
cacheMatrix <- x$getMatrix()
computeInverse <- solve(cacheMatrix, ...)
## store the newly computed matrix inverse inside the 'x' object using setInverse
x$setInverse(computeInverse)
computeInverse
}
## ----------------- NOW DO THE THINGS ----------------- ##
x <- 1:3;
y <- 4:6;
z <- 7:9;
m <- cbind(x,y,z);
matrix <- makeCacheMatrix(m)
matrix$getMatrix()
matrix$getInverse()
cacheSolve(matrix)
cacheSolve(matrix)
## ----------------- ASSIGNMENT CODE ----------------- ##
makeCacheMatrix <- function(x = matrix()) {
## contains two objects
## xMatrix - simple original matrix
## xInverse - inverse of xMatrix (or null if not yet computed)
xMatrix <- x
xInverse <- NULL
## set function sets internal matrix 'xMatrix' to the new value 'newMatrix'
## and resets the cached inverse 'xInverse' to NULL
setMatrix <- function(newMatrix) {
xMatrix <<- newMatrix
xInverse <<- NULL
}
## get function returns internal matrix 'x'
getMatrix <- function() xMatrix
## setInverse and getInverse **should be private functions**
setInverse <- function(newInverse) xInverse <<- newInverse
getInverse <- function() xInverse
## use list to initialise compute all the internal functions
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse
)
}
cacheSolve <- function(x) {
## get the cached inverse of the 'x' objects internal matrix ( 'xMatrix' )
## store as "cacheInverse"
cacheInverse <- x$getInverse()
## if the inverse has been cached then return it and exit function
if(!is.null(cacheInverse)) {
message("returning cached matrix inverse")
return(cacheInverse)
}
## get the cached matrix inside the 'x' object and compute inverse with solve()
cacheMatrix <- x$getMatrix()
computeInverse <- solve(cacheMatrix)
## store the newly computed matrix inverse inside the 'x' object using setInverse
x$setInverse(computeInverse)
computeInverse
}
x <- 1:3;
y <- 4:6;
z <- 7:9;
m <- cbind(x,y,z)
matrix <- makeCacheMatrix(m)
matrix$getMatrix()
matrix$getInverse()
cacheSolve(matrix)
solve(m)
?solve
x <- 1:3;
y <- 6:4;
z <- 7:9;
m <- cbind(x,y,z)
solve(m)
x <- c(-1,4,12);
y <- c(9,-91,56);
z <- c(22,-33, -62);
m <- cbind(x,y,z)
solve(m)
matrix <- makeCacheMatrix(m)
matrix$getMatrix()
matrix$getInverse()
cacheSolve(matrix)
matrix$getInverse()
m2 <- rbind(z,x,y);
matrix$setMatrix(m2);
matrix$getMatrix();
m2
matrix$getInverse();
